#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba8) uniform image2D accumulativeImage;

layout (binding = 1) uniform UniformBufferObject {
    vec4 bounds;
    vec2 center;
    vec2 viewportSize;
    float scale;
    int iterations;
    vec2 cValue;
} ubo;

vec3 hsv2rgb(vec3 color) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
    return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

vec3 getColor(float zRe, float zIm, int iterations) {
    if (iterations == ubo.iterations) {
        return vec3(0, 0, 0);
    } else {
        //return hsv2rgb(vec3(iterations / 255.0f, 1, 1));
        float smoothFactor = iterations + 1 - log(log( float(zRe*zRe+zIm*zIm) ) * 0.5f )/log(2);
        return hsv2rgb(vec3(smoothFactor/255.0f, 1, 1));
    }
}

void main() {
    vec2 pixCo = gl_GlobalInvocationID.xy;
    ivec2 imgSize = ivec2(ubo.viewportSize);

    float minX = ubo.bounds[0];
    float maxX = ubo.bounds[1];
    float minY = ubo.bounds[2];
    float maxY = ubo.bounds[3];

    if (imgSize.x > imgSize.y) {
        float shift = ((abs(minX - maxX)) * imgSize.x / imgSize.y - abs(minX - maxX)) / 2.0;
        maxX += shift;
        minX -= shift;
    } else if (imgSize.y > imgSize.x) {
        float shift = ((abs(minY - maxY)) * imgSize.y / imgSize.x - abs(minY - maxY)) / 2.0;
        maxY += shift;
        minY -= shift;
    }

    float factorX = (maxX - minX) / imgSize.x;
    float factorY = (minY - maxY) / imgSize.y;

    vec3 color = vec3(0.0f, 0.0f, 0.0f);

    float x = ((pixCo.x * factorX + minX) / ubo.scale) + ubo.center.x;
    float y = ((pixCo.y * factorY + maxY) / ubo.scale) + ubo.center.y;

    float zRe = x;
    float zIm = y;
    int i = 0;

    for (; i < ubo.iterations; i++) {
        float tempZRe = zRe;
        float tempZIm = zIm;

        // Power 2
        zRe = tempZRe * tempZRe - tempZIm * tempZIm + ubo.cValue.x;
        zIm = 2 * tempZRe * tempZIm + ubo.cValue.y;


        if (zRe * zRe + zIm * zIm > 4) {
            break;
        }
    }

    imageStore(accumulativeImage, ivec2(gl_GlobalInvocationID.xy), vec4(getColor(zRe, zIm, i), 1.0f));
}